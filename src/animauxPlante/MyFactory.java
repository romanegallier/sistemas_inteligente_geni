package animauxPlante;

import animauxPlante.impl.*;

import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: MyFactory<br>
 * @version generated on Sat Sep 30 17:35:42 BRT 2017 by romane
 */
public class MyFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public MyFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public MyFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://www.semanticweb.org/romane/ontologies/2017/8/AnimauxPlantes.owl#Animal
     */

    {
        javaMapping.add("http://www.semanticweb.org/romane/ontologies/2017/8/AnimauxPlantes.owl#Animal", Animal.class, DefaultAnimal.class);
    }

    /**
     * Creates an instance of type Animal.  Modifies the underlying ontology.
     */
    public Animal createAnimal(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ANIMAL, DefaultAnimal.class);
    }

    /**
     * Gets an instance of type Animal with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Animal getAnimal(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ANIMAL, DefaultAnimal.class);
    }

    /**
     * Gets all instances of Animal from the ontology.
     */
    public Collection<? extends Animal> getAllAnimalInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ANIMAL, DefaultAnimal.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/romane/ontologies/2017/8/AnimauxPlantes.owl#Arbre
     */

    {
        javaMapping.add("http://www.semanticweb.org/romane/ontologies/2017/8/AnimauxPlantes.owl#Arbre", Arbre.class, DefaultArbre.class);
    }

    /**
     * Creates an instance of type Arbre.  Modifies the underlying ontology.
     */
    public Arbre createArbre(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ARBRE, DefaultArbre.class);
    }

    /**
     * Gets an instance of type Arbre with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Arbre getArbre(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ARBRE, DefaultArbre.class);
    }

    /**
     * Gets all instances of Arbre from the ontology.
     */
    public Collection<? extends Arbre> getAllArbreInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ARBRE, DefaultArbre.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/romane/ontologies/2017/8/AnimauxPlantes.owl#Branche
     */

    {
        javaMapping.add("http://www.semanticweb.org/romane/ontologies/2017/8/AnimauxPlantes.owl#Branche", Branche.class, DefaultBranche.class);
    }

    /**
     * Creates an instance of type Branche.  Modifies the underlying ontology.
     */
    public Branche createBranche(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BRANCHE, DefaultBranche.class);
    }

    /**
     * Gets an instance of type Branche with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Branche getBranche(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BRANCHE, DefaultBranche.class);
    }

    /**
     * Gets all instances of Branche from the ontology.
     */
    public Collection<? extends Branche> getAllBrancheInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BRANCHE, DefaultBranche.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/romane/ontologies/2017/8/AnimauxPlantes.owl#Carnivore
     */

    {
        javaMapping.add("http://www.semanticweb.org/romane/ontologies/2017/8/AnimauxPlantes.owl#Carnivore", Carnivore.class, DefaultCarnivore.class);
    }

    /**
     * Creates an instance of type Carnivore.  Modifies the underlying ontology.
     */
    public Carnivore createCarnivore(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CARNIVORE, DefaultCarnivore.class);
    }

    /**
     * Gets an instance of type Carnivore with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Carnivore getCarnivore(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CARNIVORE, DefaultCarnivore.class);
    }

    /**
     * Gets all instances of Carnivore from the ontology.
     */
    public Collection<? extends Carnivore> getAllCarnivoreInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CARNIVORE, DefaultCarnivore.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/romane/ontologies/2017/8/AnimauxPlantes.owl#Feuille
     */

    {
        javaMapping.add("http://www.semanticweb.org/romane/ontologies/2017/8/AnimauxPlantes.owl#Feuille", Feuille.class, DefaultFeuille.class);
    }

    /**
     * Creates an instance of type Feuille.  Modifies the underlying ontology.
     */
    public Feuille createFeuille(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FEUILLE, DefaultFeuille.class);
    }

    /**
     * Gets an instance of type Feuille with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Feuille getFeuille(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FEUILLE, DefaultFeuille.class);
    }

    /**
     * Gets all instances of Feuille from the ontology.
     */
    public Collection<? extends Feuille> getAllFeuilleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FEUILLE, DefaultFeuille.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/romane/ontologies/2017/8/AnimauxPlantes.owl#Girafe
     */

    {
        javaMapping.add("http://www.semanticweb.org/romane/ontologies/2017/8/AnimauxPlantes.owl#Girafe", Girafe.class, DefaultGirafe.class);
    }

    /**
     * Creates an instance of type Girafe.  Modifies the underlying ontology.
     */
    public Girafe createGirafe(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GIRAFE, DefaultGirafe.class);
    }

    /**
     * Gets an instance of type Girafe with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Girafe getGirafe(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GIRAFE, DefaultGirafe.class);
    }

    /**
     * Gets all instances of Girafe from the ontology.
     */
    public Collection<? extends Girafe> getAllGirafeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GIRAFE, DefaultGirafe.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/romane/ontologies/2017/8/AnimauxPlantes.owl#Herbivore
     */

    {
        javaMapping.add("http://www.semanticweb.org/romane/ontologies/2017/8/AnimauxPlantes.owl#Herbivore", Herbivore.class, DefaultHerbivore.class);
    }

    /**
     * Creates an instance of type Herbivore.  Modifies the underlying ontology.
     */
    public Herbivore createHerbivore(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HERBIVORE, DefaultHerbivore.class);
    }

    /**
     * Gets an instance of type Herbivore with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Herbivore getHerbivore(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HERBIVORE, DefaultHerbivore.class);
    }

    /**
     * Gets all instances of Herbivore from the ontology.
     */
    public Collection<? extends Herbivore> getAllHerbivoreInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HERBIVORE, DefaultHerbivore.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/romane/ontologies/2017/8/AnimauxPlantes.owl#Lion
     */

    {
        javaMapping.add("http://www.semanticweb.org/romane/ontologies/2017/8/AnimauxPlantes.owl#Lion", Lion.class, DefaultLion.class);
    }

    /**
     * Creates an instance of type Lion.  Modifies the underlying ontology.
     */
    public Lion createLion(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LION, DefaultLion.class);
    }

    /**
     * Gets an instance of type Lion with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Lion getLion(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LION, DefaultLion.class);
    }

    /**
     * Gets all instances of Lion from the ontology.
     */
    public Collection<? extends Lion> getAllLionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LION, DefaultLion.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/romane/ontologies/2017/8/AnimauxPlantes.owl#Plante
     */

    {
        javaMapping.add("http://www.semanticweb.org/romane/ontologies/2017/8/AnimauxPlantes.owl#Plante", Plante.class, DefaultPlante.class);
    }

    /**
     * Creates an instance of type Plante.  Modifies the underlying ontology.
     */
    public Plante createPlante(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PLANTE, DefaultPlante.class);
    }

    /**
     * Gets an instance of type Plante with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Plante getPlante(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PLANTE, DefaultPlante.class);
    }

    /**
     * Gets all instances of Plante from the ontology.
     */
    public Collection<? extends Plante> getAllPlanteInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PLANTE, DefaultPlante.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/romane/ontologies/2017/8/AnimauxPlantes.owl#PlanteSavoureuse
     */

    {
        javaMapping.add("http://www.semanticweb.org/romane/ontologies/2017/8/AnimauxPlantes.owl#PlanteSavoureuse", PlanteSavoureuse.class, DefaultPlanteSavoureuse.class);
    }

    /**
     * Creates an instance of type PlanteSavoureuse.  Modifies the underlying ontology.
     */
    public PlanteSavoureuse createPlanteSavoureuse(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PLANTESAVOUREUSE, DefaultPlanteSavoureuse.class);
    }

    /**
     * Gets an instance of type PlanteSavoureuse with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PlanteSavoureuse getPlanteSavoureuse(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PLANTESAVOUREUSE, DefaultPlanteSavoureuse.class);
    }

    /**
     * Gets all instances of PlanteSavoureuse from the ontology.
     */
    public Collection<? extends PlanteSavoureuse> getAllPlanteSavoureuseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PLANTESAVOUREUSE, DefaultPlanteSavoureuse.class);
    }


}
